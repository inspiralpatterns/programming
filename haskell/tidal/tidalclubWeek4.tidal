{-
    TIDAL COURSE WEEK 4
    Oscillator / randomness
-}

d2
    $ slow 8
    $ struct "t(<3,5>,<7,11>)"
    $ note (irand 5 + irand 10)
    # sound "strato_a_fx"
    # gain (slow 8 $ range 0.3 0.7 $ saw)

-- same as above, struct defined together with n pattern
d3
    $ n (struct "t(3,8)" $ (irand 200 + irand 50))
    # sound "foley"
    # gain 0.7


-- smooth: linear interpolation in Pattern Fractional
-- returns an oscillator, i.e. no triggers to OSC messages
d1
    $ s "juno_acid:1*16"
    # note (slow 4 $ smooth "-1@1.2 0.3@0.5 1.3!")
    # cut (choose [1,2,3])
    # legato (range 0.2 9 $ rand)
    # gain (slow 4 $ range 0.5 1 $ saw)


-- mininotation, use of | to indicate to choose
-- either pattern for each cycle
d2
    $ note (scale "dorian" "[0@0.6 3|1!|2?|4*3?0.7|2 . 3(3,8)|[1,2]|{0 2 1}%4]")
    # s "rash:24"
    # legato "<[0.3,0.6 .. 2]>"


-- use of repeatCycles to restart the random generation
-- obs: randomness is deterministic
d2
    $ repeatCycles 8
    $ scramble (irand 16)
    $ struct "[t(<4 5>,7,<1 2 3>)|t(<4 7>,<9 12>)]"
    $ n (irand 10)
    # sound (wchoose [("cpu", 0.6), ("bskick", 0.4), ("foley", 0.2)])
    # speed (slow 4 (range 0.02 0.7 $ perlin))
    # cut (choose [1,2])
    # waveloss (slow 4 (range 20 60 $ perlin))


-- scramble does not produce events
-- i.e. no new triggers
d1
    $ scramble "<4 8>"
    $ slow 2
    $ chop 8
    $ s "bev:1"
    # legato 1

-- repeat cycles with patternable value
:t (innerJoin $ (\ n -> repeatCycles n $ s "bd") <$> "1 2 3")


do
    let melodicSeq = "0 -1 3 2 5 4 3 -3"
    d1 $ slow 2 $ note (scale "minor" melodicSeq) # s "superpiano"
